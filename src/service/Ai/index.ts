import { GoogleGenerativeAI } from "@google/generative-ai";
const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY!;
const genAI = new GoogleGenerativeAI(apiKey);

export const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};
const codegenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [],
});

export const codeSession = model.startChat({
  generationConfig: codegenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'make a todo app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\n\nHere’s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file\'s code should be included in the code field, following this example:\nfiles:{\n  "/App.js": {\n    "code": "import React from \'react\';\\nimport \'./styles.css\';\\nexport default function App() {\\n  return (\\n    <div className=\'p-4 bg-gray-100 text-center\'>\\n      <h1 className=\'text-2xl font-bold text-blue-500\'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className=\'mt-2 text-gray-700\'>This is a live code editor.</p>\\n    </div>\\n  );\\n}"\n  }\n}\n  Additionally, include an explanation of the project\'s structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,"firebase","@google/generative-ai" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n ',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "projectTitle": "React Todo App with Tailwind CSS",\n  "explanation": "This project implements a Todo application using React, styled with Tailwind CSS, and utilizing Lucide React icons for visual elements. The application allows users to add, edit, and delete tasks. date-fns is used for date formatting. The components are organized into separate folders for better code organization and maintainability. The design prioritizes a clean and user-friendly interface, aiming for a production-ready application.",\n  "files": {\n    "/App.js": {\n      "code": "import React from \'react\';\\nimport TodoList from \'./components/TodoList\';\\nimport Header from \'./components/Header\';\\nimport Footer from \'./components/Footer\';\\n\\nfunction App() {\\n  return (\\n    <div className=\\"min-h-screen bg-gray-100 flex flex-col\\">\\n      <Header />\\n      <div className=\\"container mx-auto p-4 flex-grow\\">\\n          <TodoList />\\n      </div>\\n      <Footer />\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n"\n    },\n    "/components/Header.js": {\n      "code": "import React from \'react\';\\nimport { Clock } from \'lucide-react\';\\n\\nfunction Header() {\\n  return (\\n    <header className=\\"bg-blue-500 text-white p-4 flex items-center justify-between\\">\\n        <div className=\\"flex items-center\\">\\n          <Clock className=\\"mr-2\\"/>\\n            <h1 className=\\"text-2xl font-bold\\">My Todo App</h1>\\n        </div>\\n        \\n    </header>\\n  );\\n}\\n\\nexport default Header;\\n"\n    },\n    "/components/Footer.js": {\n      "code": "import React from \'react\';\\n\\nfunction Footer() {\\n  return (\\n    <footer className=\\"bg-gray-700 text-white text-center p-4\\">\\n      <p>&copy; {new Date().getFullYear()} Todo App. All rights reserved.</p>\\n    </footer>\\n  );\\n}\\n\\nexport default Footer;\\n"\n    },\n     "/components/TodoItem.js": {\n      "code": "import React, { useState } from \'react\';\\nimport { Trash, Edit, Check, X } from \'lucide-react\';\\nimport { format } from \'date-fns\';\\n\\nfunction TodoItem({ todo, onToggle, onEdit, onDelete }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editedTask, setEditedTask] = useState(todo.task);\\n  const today = new Date();\\n  const isOverdue = todo.dueDate && new Date(todo.dueDate) < today;\\n  const formattedDueDate = todo.dueDate ? format(new Date(todo.dueDate), \'yyyy-MM-dd\') : \'\';\\n  const formattedCreatedDate = format(new Date(todo.createdDate), \'yyyy-MM-dd\');\\n  \\n  const handleEditClick = () => {\\n    setIsEditing(true);\\n  };\\n\\n  const handleSaveClick = () => {\\n    onEdit(todo.id, editedTask);\\n    setIsEditing(false);\\n  };\\n\\n  const handleCancelClick = () => {\\n      setIsEditing(false);\\n      setEditedTask(todo.task);  // Reset to the original task\\n  };\\n\\n  const handleInputChange = (e) => {\\n      setEditedTask(e.target.value);\\n  };\\n  return (\\n    <li className={`p-4 mb-2 rounded shadow-md  ${todo.completed ? \'bg-green-100 line-through\' : \'bg-white\'} `}>\\n      <div className=\\"flex items-center justify-between\\">\\n        <div className=\'flex flex-col\'>\\n          {isEditing ? (\\n            <input\\n              type=\\"text\\"\\n              value={editedTask}\\n              onChange={handleInputChange}\\n              className=\\"border rounded px-2 py-1 text-black\\"\\n            />\\n          ) : (\\n            <span className=\'text-lg font-semibold\'>{todo.task}</span>\\n          )}\\n          <div className=\'text-xs text-gray-600 mt-1\'>\\n              {`Created: ${formattedCreatedDate}`}\\n              {formattedDueDate && ` | Due: ${formattedDueDate}`}\\n              {isOverdue && <span className=\'ml-2 text-red-500\'> (Overdue)</span>}\\n          </div>\\n\\n        </div>\\n        <div>\\n            {\\n              isEditing ? (\\n                <div>\\n                    <button onClick={handleSaveClick} className=\'p-1 mr-2 bg-green-400 rounded hover:bg-green-500 text-white\'><Check /></button>\\n                    <button onClick={handleCancelClick} className=\'p-1 bg-red-400 rounded hover:bg-red-500 text-white\'><X /></button>\\n                </div>\\n\\n              ) : (\\n                <div className=\'flex gap-2\'>\\n                  <button onClick={() => onToggle(todo.id)} className=\'p-1 bg-blue-400 rounded hover:bg-blue-500 text-white\'><Check /></button>\\n                   <button onClick={handleEditClick} className=\'p-1 bg-yellow-400 rounded hover:bg-yellow-500 text-white\'><Edit /></button>\\n                   <button onClick={() => onDelete(todo.id)} className=\'p-1 bg-red-400 rounded hover:bg-red-500 text-white\'><Trash /></button>\\n               </div>\\n\\n              )\\n            }\\n        </div>\\n      </div>\\n    </li>\\n  );\\n}\\n\\nexport default TodoItem;\\n"\n    },\n    "/components/TodoList.js": {\n      "code": "import React, { useState } from \'react\';\\nimport TodoItem from \'./TodoItem\';\\nimport { Plus } from \'lucide-react\';\\n\\nfunction TodoList() {\\n  const [todos, setTodos] = useState([]);\\n  const [newTask, setNewTask] = useState(\'\');\\n  const [newDueDate, setNewDueDate] = useState(\'\');\\n\\n  const handleAddTodo = () => {\\n    if (newTask.trim() !== \'\') {\\n       setTodos([...todos, {\\n          id: Date.now(),\\n          task: newTask,\\n          completed: false,\\n          createdDate: new Date(),\\n          dueDate: newDueDate || null\\n        }]);\\n      setNewTask(\'\');\\n      setNewDueDate(\'\');\\n    }\\n  };\\n\\n  const handleToggleComplete = (id) => {\\n    setTodos(todos.map(todo => todo.id === id ? { ...todo, completed: !todo.completed } : todo));\\n  };\\n\\n  const handleEditTodo = (id, updatedTask) => {\\n    setTodos(todos.map(todo => todo.id === id ? { ...todo, task: updatedTask } : todo));\\n  };\\n\\n  const handleDeleteTodo = (id) => {\\n    setTodos(todos.filter(todo => todo.id !== id));\\n  };\\n\\n  return (\\n    <div className=\\"bg-gray-100 p-4 rounded shadow-md\\">\\n      <h2 className=\\"text-2xl font-bold mb-4\\">Your Todos 📝</h2>\\n      <div className=\\"flex gap-2 items-center mb-4\\">\\n          <input\\n              type=\\"text\\"\\n              placeholder=\\"Add new todo...\\"\\n              value={newTask}\\n              onChange={e => setNewTask(e.target.value)}\\n              className=\\"border rounded p-2 flex-grow text-black\\"\\n          />\\n          <input\\n            type=\\"date\\"\\n            value={newDueDate}\\n            onChange={e => setNewDueDate(e.target.value)}\\n            className=\'border rounded p-2 text-black\'\\n          />\\n          <button onClick={handleAddTodo} className=\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\\"><Plus /></button>\\n        </div>\\n      \\n      {todos.length === 0 ? (\\n           <div className=\\"text-center mt-4 p-4 bg-white rounded shadow-sm\\">\\n               <p>No todos yet. Add one to get started!</p>\\n           </div>\\n        ) : (\\n        <ul className=\\"mt-4\\">\\n          {todos.map(todo => (\\n            <TodoItem\\n              key={todo.id}\\n              todo={todo}\\n              onToggle={handleToggleComplete}\\n              onEdit={handleEditTodo}\\n              onDelete={handleDeleteTodo}\\n            />\\n          ))}\\n        </ul>\\n      )}\\n      \\n    </div>\\n  );\\n}\\n\\nexport default TodoList;\\n"\n    }\n  },\n  "generatedFiles": [\n    "/App.js",\n     "/components/Header.js",\n     "/components/Footer.js",\n    "/components/TodoItem.js",\n    "/components/TodoList.js"\n   ]\n}\n```\n',
        },
      ],
    },
  ],
});
