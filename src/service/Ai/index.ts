import { GoogleGenerativeAI } from "@google/generative-ai";
const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY!;
const genAI = new GoogleGenerativeAI(apiKey);

export const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};
const codegenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [],
});

export const codeSession = model.startChat({
  generationConfig: codegenerationConfig,
  history: [],
});

// {
//   role: "user",
//   parts: [
//     {
//       text: 'make a something something or do this or this  : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file\'s code should be included in the code field, following this example:\nfiles:{\n  "/App.js": {\n    "code": "import React from \'react\';\\nimport \'./styles.css\';\\nexport default function App() {\\n  return (\\n    <div className=\'p-4 bg-gray-100 text-center\'>\\n      <h1 className=\'text-2xl font-bold text-blue-500\'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className=\'mt-2 text-gray-700\'>This is a live code editor.</p>\\n    </div>\\n  );\\n}"\n  }\n}\n  Additionally, include an explanation of the project\'s structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,"firebase","@google/generative-ai" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.',
//     },
//   ],
// },
// {
//   role: "model",
//   parts: [
//     {
//       text: '```json\n{\n  "projectTitle": "Beautiful Todo App",\n  "explanation": "This project implements a fully functional Todo application using React, styled with Tailwind CSS. It is structured into several components for better organization. The application allows users to add, edit, mark as complete, and delete todos. It uses date-fns for date formatting, and lucide-react for icons. The user interface is designed to be visually appealing and intuitive, making it production-ready.",\n  "files": {\n    "/App.js": {\n      "code": "import React from \'react\';\\nimport TodoList from \'./components/TodoList\';\\n\\nfunction App() {\\n  return (\\n    <div className=\\"min-h-screen bg-gray-100 flex items-center justify-center p-5\\">\\n       <div className=\\"bg-white shadow-xl rounded-lg p-6 w-full max-w-2xl relative\\">\\n           <h1 className=\\"text-2xl font-bold text-gray-800 mb-6 text-center\\">üìù My Beautiful Todos</h1>\\n           <TodoList />\\n       </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n"\n    },\n    "/components/TodoList.js": {\n      "code": "import React, { useState, useEffect } from \'react\';\\nimport { format } from \'date-fns\';\\nimport { Trash, Edit, Check, Plus } from \'lucide-react\';\\nimport AddTodoModal from \'./AddTodoModal\';\\n\\nconst initialTodos = localStorage.getItem(\'todos\') ? JSON.parse(localStorage.getItem(\'todos\')) : [];\\n\\nconst TodoList = () => {\\n  const [todos, setTodos] = useState(initialTodos);\\n  const [isModalOpen, setIsModalOpen] = useState(false);\\n  const [editingTodo, setEditingTodo] = useState(null);\\n  \\n\\n  useEffect(() => {\\n    localStorage.setItem(\'todos\', JSON.stringify(todos));\\n  }, [todos]);\\n\\n\\n  const addTodo = (newTodo) => {\\n    setTodos([...todos, { ...newTodo, id: Date.now(), completed: false }]);\\n  };\\n\\n  const deleteTodo = (id) => {\\n    setTodos(todos.filter((todo) => todo.id !== id));\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTodos(todos.map((todo) =>\\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\\n    ));\\n  };\\n\\n  const editTodo = (todo) => {\\n    setEditingTodo(todo);\\n    setIsModalOpen(true);\\n  };\\n\\n  const updateTodo = (updatedTodo) => {\\n    setTodos(todos.map((todo) =>\\n      todo.id === updatedTodo.id ? { ...updatedTodo, completed: todo.completed } : todo\\n    ));\\n    setEditingTodo(null);\\n  };\\n\\n  const handleModalClose = () => {\\n    setIsModalOpen(false);\\n    setEditingTodo(null);\\n  };\\n\\n  return (\\n    <div className=\'space-y-4\'>\\n        <button className=\\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded mb-4\\" onClick={() => setIsModalOpen(true)}><Plus className=\\"inline w-4 h-4 mr-2\\"/>Add New Todo</button>\\n        {\\n          todos.length === 0 ? (\\n          <div className=\\"text-gray-500 text-center py-4\\">\\n            <img src=\\"https://archive.org/download/placeholder-image/placeholder-image.jpg\\" alt=\\"No todos yet\\" className=\\"mx-auto w-60 h-60 mb-4\\"/>\\n            <p>You have no tasks yet! Add some...</p>\\n          </div>\\n          ) : (\\n           <ul className=\'space-y-2\'>\\n                {todos.map((todo) => (\\n                    <li key={todo.id} className=\'bg-white shadow rounded p-4 flex items-center justify-between transition hover:shadow-md\'>\\n                        <div className=\\"flex items-center w-4/5\\">\\n                          <button onClick={() => toggleComplete(todo.id)} className=\\"mr-3 focus:outline-none\\">\\n                            <span className={`rounded-full border-2 border-gray-400 w-5 h-5 inline-block flex items-center justify-center ${todo.completed ? \'bg-green-500 border-green-500\' : \'\'}`}>\\n                                 {todo.completed && <Check className=\\"w-4 h-4 text-white\\" />} </span>\\n                          </button>\\n                            <div className=\\"flex flex-col\\">\\n                                <span className={`text-lg ${todo.completed ? \'line-through text-gray-500\' : \'text-gray-800\'}`}>{todo.title}</span>\\n                                <span className=\\"text-sm text-gray-500\\">{format(new Date(todo.date), \'MMM dd, yyyy\')}</span>\\n                            </div>\\n                        </div>\\n                        <div className=\'flex space-x-2\'>\\n                           <button onClick={() => editTodo(todo)} className=\'text-blue-500 hover:text-blue-700 focus:outline-none\'><Edit className=\\"w-4 h-4\\"/></button>\\n                          <button onClick={() => deleteTodo(todo.id)} className=\'text-red-500 hover:text-red-700 focus:outline-none\'><Trash className=\\"w-4 h-4\\"/></button>\\n                        </div>\\n                    </li>\\n                ))}\\n            </ul>\\n          )\\n        }\\n       <AddTodoModal isOpen={isModalOpen} onClose={handleModalClose} addTodo={addTodo} editingTodo={editingTodo} updateTodo={updateTodo} />\\n    </div>\\n  );\\n};\\n\\nexport default TodoList;\\n"\n    },\n      "/components/AddTodoModal.js": {\n      "code": "import React, { useState, useEffect } from \'react\';\\nimport { X } from \'lucide-react\';\\n\\nconst AddTodoModal = ({ isOpen, onClose, addTodo, editingTodo, updateTodo }) => {\\n    const [title, setTitle] = useState(\'\');\\n    const [date, setDate] = useState(new Date().toISOString().slice(0, 10));\\n  \\n    useEffect(() => {\\n      if (editingTodo) {\\n          setTitle(editingTodo.title);\\n          setDate(editingTodo.date.slice(0,10));\\n      } else {\\n          setTitle(\'\');\\n          setDate(new Date().toISOString().slice(0, 10));\\n      }\\n    }, [editingTodo]);\\n    \\n    const handleSubmit = (e) => {\\n        e.preventDefault();\\n    \\n      if(title.trim() === \'\') return;  //avoid empty submission\\n        if (editingTodo) {\\n          updateTodo({ ...editingTodo, title, date });\\n        } else {\\n            addTodo({ title, date });\\n        }\\n        onClose();\\n    };\\n\\n    if (!isOpen) return null;\\n\\n    return (\\n        <div className=\\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\\">\\n           <div className=\\"bg-white p-6 rounded-lg shadow-xl w-full max-w-md relative\\">\\n               <button onClick={onClose} className=\\"absolute top-2 right-2 text-gray-500 hover:text-gray-700 focus:outline-none\\"><X className=\\"w-5 h-5\\"/></button>\\n              <h2 className=\\"text-xl font-bold mb-4\\">{editingTodo ? \'Edit Todo\' : \'Add New Todo\'}</h2>\\n              <form onSubmit={handleSubmit} className=\\"space-y-4\\">\\n                  <div>\\n                      <label htmlFor=\\"title\\" className=\\"block text-sm font-medium text-gray-700\\">Title</label>\\n                      <input type=\\"text\\" id=\\"title\\" className=\\"mt-1 p-2 w-full border rounded focus:ring focus:ring-blue-200 focus:outline-none\\" value={title} onChange={(e) => setTitle(e.target.value)} required placeholder=\\"Enter todo title\\"/>\\n                  </div>\\n                  <div>\\n                     <label htmlFor=\\"date\\" className=\\"block text-sm font-medium text-gray-700\\">Date</label>\\n                     <input type=\\"date\\" id=\\"date\\" className=\\"mt-1 p-2 w-full border rounded focus:ring focus:ring-blue-200 focus:outline-none\\" value={date} onChange={(e) => setDate(e.target.value)} required/>\\n                 </div>\\n                  <button type=\\"submit\\" className=\\"w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none\\">{editingTodo ? \'Update\' : \'Add\'}</button>\\n              </form>\\n           </div>\\n        </div>\\n    );\\n};\\n\\nexport default AddTodoModal;\\n"\n    }\n  },\n  "generatedFiles": [\n    "/App.js",\n    "/components/TodoList.js",\n    "/components/AddTodoModal.js"\n  ]\n}\n```\n',
//     },
//   ],
// },
